import { default as React } from 'react';
import type { ElementProps } from '@nodestrap/element';
import { TogglerActiveProps, IndicatorProps } from '@nodestrap/indicator';
export declare const usesWrapperLayout: () => import("@cssfn/cssfn").Rule;
export declare const usesItemLayout: () => import("@cssfn/cssfn").Rule;
export declare const usesSecondaryLayout: () => import("@cssfn/cssfn").Rule;
export declare const usesLogoLayout: () => import("@cssfn/cssfn").Rule;
export declare const usesTogglerLayout: () => import("@cssfn/cssfn").Rule;
export declare const usesMenusLayout: () => import("@cssfn/cssfn").Rule;
export declare const usesMenusCompactLayout: () => import("@cssfn/cssfn").Rule;
export declare const usesListLayout: () => import("@cssfn/cssfn").Rule;
export declare const usesMenuLayout: () => import("@cssfn/cssfn").Rule;
export declare const usesNavbarLayout: () => import("@cssfn/cssfn").Rule;
export declare const usesNavbarVariants: () => import("@cssfn/cssfn").Rule;
export declare const usesNavbarStates: () => import("@cssfn/cssfn").Rule;
export declare const useNavbarSheet: import("@cssfn/types").Factory<import("jss").Classes<"main">>;
export declare const cssProps: import("@cssfn/css-config").Refs<{
    zIndex: number;
    position: string;
    insetBlockStart: string;
    boxShadow: (string | number)[][];
    borderInline: string;
    borderBlockStart: string;
    borderRadius: number;
    paddingInline: import("@cssfn/css-types").Cust.Ref;
    paddingBlock: import("@cssfn/css-types").Cust.Ref;
    gapInline: import("@cssfn/css-types").Cust.Ref;
    gapBlock: import("@cssfn/css-types").Cust.Ref;
    menusMarginBlockFull: string[][];
    menusMarginInlineCompact: string[][];
    listJustifySelfFull: string;
    menuDisplay: string;
    menuFlexDirection: string;
    menuJustifyContent: string;
    menuAlignItems: string;
    menuWhiteSpace: string;
    menuTextAlign: string;
}>, cssDecls: import("@cssfn/css-config").Decls<{
    zIndex: number;
    position: string;
    insetBlockStart: string;
    boxShadow: (string | number)[][];
    borderInline: string;
    borderBlockStart: string;
    borderRadius: number;
    paddingInline: import("@cssfn/css-types").Cust.Ref;
    paddingBlock: import("@cssfn/css-types").Cust.Ref;
    gapInline: import("@cssfn/css-types").Cust.Ref;
    gapBlock: import("@cssfn/css-types").Cust.Ref;
    menusMarginBlockFull: string[][];
    menusMarginInlineCompact: string[][];
    listJustifySelfFull: string;
    menuDisplay: string;
    menuFlexDirection: string;
    menuJustifyContent: string;
    menuAlignItems: string;
    menuWhiteSpace: string;
    menuTextAlign: string;
}>, cssVals: import("@cssfn/css-config").Vals<{
    zIndex: number;
    position: string;
    insetBlockStart: string;
    boxShadow: (string | number)[][];
    borderInline: string;
    borderBlockStart: string;
    borderRadius: number;
    paddingInline: import("@cssfn/css-types").Cust.Ref;
    paddingBlock: import("@cssfn/css-types").Cust.Ref;
    gapInline: import("@cssfn/css-types").Cust.Ref;
    gapBlock: import("@cssfn/css-types").Cust.Ref;
    menusMarginBlockFull: string[][];
    menusMarginInlineCompact: string[][];
    listJustifySelfFull: string;
    menuDisplay: string;
    menuFlexDirection: string;
    menuJustifyContent: string;
    menuAlignItems: string;
    menuWhiteSpace: string;
    menuTextAlign: string;
}>, cssConfig: import("@cssfn/css-config").CssConfigSettings;
export interface NavbarProps<TElement extends HTMLElement = HTMLElement> extends Omit<IndicatorProps<TElement>, 'enabled'>, Omit<TogglerActiveProps, 'enabled'> {
    compact?: boolean;
    logo?: React.ReactComponentElement<any, ElementProps> | boolean;
    toggler?: React.ReactComponentElement<any, ElementProps> | boolean;
    children?: ((compact: boolean) => React.ReactNode);
}
export declare function Navbar<TElement extends HTMLElement = HTMLElement>(props: NavbarProps<TElement>): JSX.Element;
export { Navbar as default };
